# TUTORIAL PASSO-A-PASSO - IMPLEMENTAÇÃO DAS MELHORIAS
# Projeto Certeira - Coordenado pelo BMad Orchestrator + Team Specialists

## 🎯 OBJETIVO
Este tutorial te guiará na implementação manual de todas as melhorias sugeridas na análise técnica, priorizando segurança e estabilidade.

## 📋 PRÉ-REQUISITOS
- IDE (Visual Studio Code, PhpStorm, Android Studio)
- PHP 8.0+ e Composer instalados
- Flutter SDK instalado
- MySQL Server rodando
- Git para controle de versão

---

# 🚨 FASE 1 - CORREÇÕES CRÍTICAS DE SEGURANÇA (URGENTE)

## PASSO 1: REMOVER CREDENCIAIS HARDCODED

### 1.1 Criar arquivo .env na raiz da API
```bash
# Navegue para: api/
# Crie o arquivo: .env
```

**Conteúdo do arquivo `.env`:**
```env
#--------------------------------------------------------------------
# ENVIRONMENT SETTINGS
#--------------------------------------------------------------------
CI_ENVIRONMENT = development

#--------------------------------------------------------------------
# APP SETTINGS
#--------------------------------------------------------------------
app.baseURL = 'http://localhost:8080/'
app.appTimezone = 'America/Sao_Paulo'

#--------------------------------------------------------------------
# DATABASE
#--------------------------------------------------------------------
database.default.hostname = localhost
database.default.database = certeira
database.default.username = root
database.default.password = root
database.default.DBDriver = MySQLi
database.default.DBPrefix = 
database.default.port = 3306

#--------------------------------------------------------------------
# JWT SETTINGS
#--------------------------------------------------------------------
JWT_SECRET = sua_chave_secreta_muito_forte_aqui_mude_isso
JWT_EXPIRE_TIME = 3600

#--------------------------------------------------------------------
# TEST USER (APENAS DESENVOLVIMENTO)
#--------------------------------------------------------------------
TEST_USER_EMAIL = danielpaivasalles@gmail.com
TEST_USER_PASSWORD = 530337503b614a@D
TEST_USER_TYPE = empregado
```

### 1.2 Modificar AuthController.php

**Arquivo: `api/app/Controllers/AuthController.php`**

**SUBSTITUIR as linhas 21-24:**
```php
//Parametros para teste (apagar antes de subir)
$tipo = 'empregado';
$email = 'danielpaivasalles@gmail.com';
$senha = '530337503b614a@D';
```

**POR:**
```php
// Usar dados do .env apenas em desenvolvimento
if (ENVIRONMENT === 'development' && (!$tipo || !$email || !$senha)) {
    $tipo = getenv('TEST_USER_TYPE');
    $email = getenv('TEST_USER_EMAIL');
    $senha = getenv('TEST_USER_PASSWORD');
}
```

### 1.3 Atualizar configuração JWT

**No mesmo arquivo AuthController.php, linha 60, SUBSTITUIR:**
```php
$jwt = JWT::encode($payload, getenv('JWT_SECRET'), 'HS256');
```

**POR:**
```php
$jwtSecret = getenv('JWT_SECRET');
if (!$jwtSecret) {
    return $this->response->setJSON([
        'status' => false,
        'mensagem' => 'Configuração de segurança inválida.'
    ])->setStatusCode(500);
}
$jwt = JWT::encode($payload, $jwtSecret, 'HS256');
```

### 1.4 Atualizar Database.php

**Arquivo: `api/app/Config/Database.php`**

**SUBSTITUIR as linhas 29-32:**
```php
'hostname'     => 'localhost',
'username'     => 'root',
'password'     => 'root',
'database'     => 'certeira',
```

**POR:**
```php
'hostname'     => getenv('database.default.hostname') ?: 'localhost',
'username'     => getenv('database.default.username') ?: 'root',
'password'     => getenv('database.default.password') ?: 'root',
'database'     => getenv('database.default.database') ?: 'certeira',
```

---

## PASSO 2: IMPLEMENTAR MIDDLEWARE DE AUTENTICAÇÃO

### 2.1 Criar AuthFilter

**Criar arquivo: `api/app/Filters/AuthFilter.php`**
```php
<?php

namespace App\Filters;

use CodeIgniter\Filters\FilterInterface;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Firebase\JWT\JWT;
use Firebase\JWT\Key;

class AuthFilter implements FilterInterface
{
    public function before(RequestInterface $request, $arguments = null)
    {
        $authHeader = $request->getHeaderLine('Authorization');
        
        if (!$authHeader) {
            return service('response')->setJSON([
                'status' => false,
                'mensagem' => 'Token de autorização necessário.'
            ])->setStatusCode(401);
        }

        $token = str_replace('Bearer ', '', $authHeader);
        
        try {
            $jwtSecret = getenv('JWT_SECRET');
            $decoded = JWT::decode($token, new Key($jwtSecret, 'HS256'));
            
            // Adiciona dados do usuário à requisição
            $request->user = $decoded;
            return $request;
            
        } catch (\Exception $e) {
            return service('response')->setJSON([
                'status' => false,
                'mensagem' => 'Token inválido: ' . $e->getMessage()
            ])->setStatusCode(401);
        }
    }

    public function after(RequestInterface $request, ResponseInterface $response, $arguments = null)
    {
        // Não precisa de implementação
    }
}
```

### 2.2 Registrar o filtro

**Arquivo: `api/app/Config/Filters.php`**

**Adicionar na seção aliases:**
```php
public array $aliases = [
    'csrf'          => CSRF::class,
    'toolbar'       => DebugToolbar::class,
    'honeypot'      => Honeypot::class,
    'invalidchars'  => InvalidChars::class,
    'secureheaders' => SecureHeaders::class,
    'auth'          => \App\Filters\AuthFilter::class,  // ADICIONAR ESTA LINHA
];
```

### 2.3 Proteger rotas

**Arquivo: `api/app/Config/Routes.php`**

**Adicionar proteção às rotas (exemplo):**
```php
$routes->group('api', ['filter' => 'auth'], static function ($routes) {
    $routes->resource('empresas', ['controller' => 'EmpresaController']);
    $routes->resource('enderecos', ['controller' => 'EnderecoController']);
    // Adicionar outras rotas protegidas aqui
});

// Rota de login sem proteção
$routes->post('api/auth/login', 'AuthController::login');
```

---

# 🟡 FASE 2 - MELHORIAS DE ARQUITETURA

## PASSO 3: IMPLEMENTAR PERSISTÊNCIA DE SESSÃO NO FLUTTER

### 3.1 Adicionar dependências

**Arquivo: `flutter_app/pubspec.yaml`**

**Adicionar nas dependencies:**
```yaml
dependencies:
  http: ^0.13.6
  window_size: ^0.1.0
  provider: ^6.0.5
  shared_preferences: ^2.2.2  # ADICIONAR
  sqflite: ^2.3.0            # ADICIONAR
  path: ^1.8.3               # ADICIONAR
  flutter:
    sdk: flutter
```

**Executar:**
```bash
cd flutter_app
flutter pub get
```

### 3.2 Criar AuthProvider

**Criar arquivo: `flutter_app/lib/app/core/providers/auth_provider.dart`**
```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../../../app/modules/auth/models/login_model.dart';

class AuthProvider extends ChangeNotifier {
  bool _isLoggedIn = false;
  String? _token;
  Map<String, dynamic>? _userData;
  
  bool get isLoggedIn => _isLoggedIn;
  String? get token => _token;
  Map<String, dynamic>? get userData => _userData;

  Future<void> saveSession(LoginResponse loginResponse) async {
    final prefs = await SharedPreferences.getInstance();
    
    _isLoggedIn = true;
    _token = loginResponse.token;
    _userData = loginResponse.usuario;
    
    await prefs.setBool('isLoggedIn', true);
    await prefs.setString('token', loginResponse.token ?? '');
    await prefs.setString('userData', jsonEncode(loginResponse.usuario));
    
    notifyListeners();
  }

  Future<void> loadSession() async {
    final prefs = await SharedPreferences.getInstance();
    
    _isLoggedIn = prefs.getBool('isLoggedIn') ?? false;
    _token = prefs.getString('token');
    
    final userDataString = prefs.getString('userData');
    if (userDataString != null) {
      _userData = jsonDecode(userDataString);
    }
    
    notifyListeners();
  }

  Future<void> clearSession() async {
    final prefs = await SharedPreferences.getInstance();
    
    _isLoggedIn = false;
    _token = null;
    _userData = null;
    
    await prefs.clear();
    
    notifyListeners();
  }

  Map<String, String> getAuthHeaders() {
    return {
      'Content-Type': 'application/json',
      if (_token != null) 'Authorization': 'Bearer $_token',
    };
  }
}
```

### 3.3 Atualizar main.dart

**Arquivo: `flutter_app/lib/main.dart`**

**SUBSTITUIR todo o conteúdo por:**
```dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'app/core/helpers/screen_helper.dart';
import 'app/core/providers/auth_provider.dart';
import 'app/modules/auth/pages/login_page.dart';
import 'app/modules/dashboard/pages/dashboard_page.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await ScreenHelper.maximizarWindow();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => AuthProvider()..loadSession(),
      child: MaterialApp(
        title: 'Certeira',
        debugShowCheckedModeBanner: false,
        home: Consumer<AuthProvider>(
          builder: (context, authProvider, child) {
            return authProvider.isLoggedIn 
              ? const DashboardPage() 
              : const LoginPage();
          },
        ),
      ),
    );
  }
}
```

### 3.4 Atualizar LoginController

**Arquivo: `flutter_app/lib/app/modules/auth/controllers/login_controller.dart`**

**SUBSTITUIR todo o conteúdo por:**
```dart
import 'dart:convert';
import 'package:flutter_app/app/core/constants.dart';
import 'package:http/http.dart' as http;
import '../models/login_model.dart';

class LoginController {
  Future<LoginResponse> fazerLogin(String email, String senha) async {
    try {
      final url = Uri.parse(ApiRoutes.authLogin);

      final resposta = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'email': email, 
          'senha': senha,
          'tipo': 'empregado' // Adicionar tipo
        }),
      );

      if (resposta.statusCode == 200) {
        return LoginResponse.fromJson(jsonDecode(resposta.body));
      } else {
        final errorBody = jsonDecode(resposta.body);
        return LoginResponse(
          status: false,
          mensagem: errorBody['mensagem'] ?? 'Erro na conexão: ${resposta.statusCode}',
        );
      }
    } catch (e) {
      return LoginResponse(
        status: false, 
        mensagem: 'Erro inesperado: $e'
      );
    }
  }
}
```

---

## PASSO 4: IMPLEMENTAR VALIDAÇÕES ROBUSTAS

### 4.1 Criar ValidationHelper na API

**Criar arquivo: `api/app/Helpers/ValidationHelper.php`**
```php
<?php

namespace App\Helpers;

class ValidationHelper
{
    public static function sanitizeString($input)
    {
        return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
    }

    public static function validateEmail($email)
    {
        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
    }

    public static function validateCNPJ($cnpj)
    {
        $cnpj = preg_replace('/\D/', '', $cnpj);
        
        if (strlen($cnpj) !== 14) {
            return false;
        }

        // Validação básica de CNPJ
        // Implementar algoritmo completo conforme necessário
        return true;
    }

    public static function validateRequired($data, $required_fields)
    {
        $missing_fields = [];
        
        foreach ($required_fields as $field) {
            if (!isset($data[$field]) || empty(trim($data[$field]))) {
                $missing_fields[] = $field;
            }
        }
        
        return $missing_fields;
    }
}
```

### 4.2 Atualizar EmpresaController com validações

**Arquivo: `api/app/Controllers/EmpresaController.php`**

**Adicionar no início:**
```php
use App\Helpers\ValidationHelper;
```

**SUBSTITUIR o método create() (linha 65) por:**
```php
public function create() {
    $dados = $this->request->getJSON(true);

    // Validar campos obrigatórios
    $required_fields = ['razao', 'fantasia', 'cnpj', 'im'];
    $missing_fields = ValidationHelper::validateRequired($dados, $required_fields);
    
    if (!empty($missing_fields)) {
        return $this->response->setJSON([
            'status' => false,
            'mensagem' => 'Campos obrigatórios faltando: ' . implode(', ', $missing_fields)
        ])->setStatusCode(400);
    }

    // Validar CNPJ
    if (!ValidationHelper::validateCNPJ($dados['cnpj'])) {
        return $this->response->setJSON([
            'status' => false,
            'mensagem' => 'CNPJ inválido.'
        ])->setStatusCode(400);
    }

    // Sanitizar dados
    $empresaData = [
        'razao' => ValidationHelper::sanitizeString($dados['razao']),
        'fantasia' => ValidationHelper::sanitizeString($dados['fantasia']),
        'cnpj' => ValidationHelper::sanitizeString($dados['cnpj']),
        'im' => ValidationHelper::sanitizeString($dados['im']),
        'codigoEndereco' => filter_var($dados['codigoEndereco'], FILTER_VALIDATE_INT),
        'dataCadastro' => date('Y-m-d H:i:s'),
        'dataDesativado' => null,
    ];

    try {
        $this->empresaModel->insert($empresaData);
        return $this->response->setJSON([
            'status' => true,
            'data' => $this->toArray($this->empresaModel->getInsertID())
        ]);
    } catch (\Exception $e) {
        return $this->response->setJSON([
            'status' => false,
            'mensagem' => 'Erro ao criar empresa: ' . $e->getMessage()
        ])->setStatusCode(500);
    }
}
```

---

# 🟢 FASE 3 - MELHORIAS FUNCIONAIS

## PASSO 5: IMPLEMENTAR SISTEMA DE LOGS

### 5.1 Configurar logs personalizados

**Arquivo: `api/app/Config/Logger.php`**

**Adicionar configuração customizada:**
```php
public array $handlers = [
    // File Handler
    'CodeIgniter\Log\Handlers\FileHandler' => [
        'handles' => [
            'critical', 'alert', 'emergency', 'debug',
            'error', 'info', 'notice', 'warning',
        ],
        'path' => WRITEPATH . 'logs/',
        'fileExtension' => 'log',
        'filePermissions' => 0644,
        'dateFormat' => 'Y-m-d H:i:s',
    ],

    // Custom Security Handler
    'App\Libraries\SecurityLogHandler' => [
        'handles' => ['security'],
        'path' => WRITEPATH . 'logs/security/',
        'fileExtension' => 'log',
        'dateFormat' => 'Y-m-d H:i:s',
    ],
];
```

### 5.2 Criar SecurityLogHandler

**Criar arquivo: `api/app/Libraries/SecurityLogHandler.php`**
```php
<?php

namespace App\Libraries;

use CodeIgniter\Log\Handlers\BaseHandler;

class SecurityLogHandler extends BaseHandler
{
    protected $handles = ['security'];
    protected $path;
    protected $fileExtension;
    protected $dateFormat;

    public function __construct(array $config = [])
    {
        parent::__construct($config);
        
        $this->path = $config['path'] ?? WRITEPATH . 'logs/security/';
        $this->fileExtension = $config['fileExtension'] ?? 'log';
        $this->dateFormat = $config['dateFormat'] ?? 'Y-m-d H:i:s';
        
        if (!is_dir($this->path)) {
            mkdir($this->path, 0755, true);
        }
    }

    public function handle($level, $message): bool
    {
        $filename = $this->path . 'security-' . date('Y-m-d') . '.' . $this->fileExtension;
        $logMessage = '[' . date($this->dateFormat) . '] ' . strtoupper($level) . ': ' . $message . PHP_EOL;
        
        return file_put_contents($filename, $logMessage, FILE_APPEND | LOCK_EX) !== false;
    }
}
```

### 5.3 Implementar logging no AuthFilter

**Atualizar: `api/app/Filters/AuthFilter.php`**

**Adicionar após as tentativas de autenticação:**
```php
// No caso de token inválido
} catch (\Exception $e) {
    // Log de tentativa de acesso não autorizado
    log_message('security', 'Tentativa de acesso com token inválido: ' . $request->getIPAddress() . ' - ' . $e->getMessage());
    
    return service('response')->setJSON([
        'status' => false,
        'mensagem' => 'Token inválido.'
    ])->setStatusCode(401);
}
```

---

## PASSO 6: IMPLEMENTAR LOADING STATES NO FLUTTER

### 6.1 Atualizar EmpresasController

**Arquivo: `flutter_app/lib/app/modules/empresa/controllers/empresas_controller.dart`**

**Adicionar propriedades de loading:**
```dart
class EmpresasController extends ChangeNotifier {
  final TextEditingController searchController = TextEditingController();

  List<EmpresaModel> allEmpresas = [];
  List<EmpresaModel> filteredEmpresas = [];
  bool _isLoading = false;  // ADICIONAR
  String? _errorMessage;    // ADICIONAR

  bool get isLoading => _isLoading;        // ADICIONAR
  String? get errorMessage => _errorMessage; // ADICIONAR

  // ... resto do código existente

  Future<void> loadEmpresas() async {
    _isLoading = true;     // ADICIONAR
    _errorMessage = null;  // ADICIONAR
    notifyListeners();     // ADICIONAR

    try {
      final url = Uri.parse(ApiRoutes.empresas);
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        allEmpresas = data.map((json) => EmpresaModel.fromJson(json)).toList();
        filteredEmpresas = List.from(allEmpresas);
      } else {
        _errorMessage = 'Erro ao carregar empresas: ${response.statusCode}';  // ADICIONAR
      }
    } catch (e) {
      _errorMessage = 'Erro inesperado: $e';  // ADICIONAR
    } finally {
      _isLoading = false;  // ADICIONAR
      notifyListeners();   // ADICIONAR
    }
  }
}
```

---

# 📋 CHECKLIST DE VERIFICAÇÃO

## Segurança ✅
- [ ] Credenciais removidas do código
- [ ] Arquivo .env configurado
- [ ] AuthFilter implementado
- [ ] Rotas protegidas
- [ ] Logs de segurança ativos

## Flutter ✅
- [ ] AuthProvider implementado
- [ ] Persistência de sessão funcionando
- [ ] Loading states implementados
- [ ] Tratamento de erros melhorado
- [ ] Headers de autorização configurados

## API ✅
- [ ] Validações robustas implementadas
- [ ] Sanitização de inputs ativa
- [ ] Sistema de logs funcionando
- [ ] Respostas padronizadas
- [ ] Middleware de autenticação ativo

---

# 🚀 COMANDOS PARA EXECUÇÃO

## Testando a API:
```bash
cd api
php spark serve
```

## Testando o Flutter:
```bash
cd flutter_app
flutter pub get
flutter run
```

## Verificando logs:
```bash
tail -f api/writable/logs/log-$(date +%Y-%m-%d).log
tail -f api/writable/logs/security/security-$(date +%Y-%m-%d).log
```

---

# 📞 SUPORTE E PRÓXIMOS PASSOS

Após implementar todas as melhorias:

1. **Testar cada funcionalidade**
2. **Verificar logs de segurança**
3. **Validar autenticação end-to-end**
4. **Implementar testes automatizados** (próxima fase)

**Em caso de dúvidas:** Consulte a documentação do CodeIgniter 4 e Flutter, ou solicite apoio do BMad Orchestrator para coordenar assistência especializada.

---
**Tutorial criado por:** BMad Orchestrator + Dev Team Specialists  
**Data:** 2025-07-22  
**Versão:** 1.0 - Implementação Manual Completa